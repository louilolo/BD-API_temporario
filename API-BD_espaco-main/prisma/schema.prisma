// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider           = "postgresql"
  url                = env("DATABASE_URL")         // runtime (ex.: Pooler 6543)
  directUrl          = env("DIRECT_URL")           // migrations (ex.: Direto 5432)
  shadowDatabaseUrl  = env("SHADOW_DATABASE_URL")  // só para `migrate dev` em ambiente local
}

/* ============================ Enums ============================ */

enum PushStatus {
  PENDING
  SENT
  ACK
  FAILED
  CANCELLED
}

/* ============================ Models ============================ */

model Room {
  id                 String   @id @default(uuid())
  name               String
  location           String?
  capacity           Int?
  openremoteAssetId  String?
  createdAt          DateTime @default(now())

  // ---- Novos p/ integração com OpenRemote ----
  timezone           String   @default("America/Belem")
  powerAttribute     String   @default("power")
  powerLeadMinutes   Int      @default(5)
  openremoteLinkedAt DateTime?

  // Relações
  events             Event[]
  schedulePushes     DeviceSchedulePush[]
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  role      String   @default("user")
  createdAt DateTime @default(now())
  events    Event[]  @relation("UserEvents")
}

model Event {
  id           String   @id @default(uuid())

  // Relação com Room
  room         Room     @relation(fields: [roomId], references: [id])
  roomId       String

  // (Opcional) Quem criou
  createdBy    User?    @relation("UserEvents", fields: [createdById], references: [id])
  createdById  String?

  // Metadados
  title        String
  description  String?

  // Janela do evento
  startsAt     DateTime
  endsAt       DateTime

  // Campos originais
  timezone     String   @default("America/Belem")
  status       String   @default("confirmed")
  orScheduleId String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt           // novo: carimbo de atualização

  // Relação 1:1 (opcional) com o push enviado ao OR
  schedulePush DeviceSchedulePush?

  @@index([roomId, startsAt, endsAt])
}

/**
 * Rastrea cada envio de agendamento ao OpenRemote (idempotência, retries, ACK).
 * - 1:1 com Event (eventId único)
 * - N:1 com Room
 */
model DeviceSchedulePush {
  id              String      @id @default(uuid())

  // 1:1 com Event
  eventId         String      @unique
  event           Event       @relation(fields: [eventId], references: [id])

  // N:1 com Room
  roomId          String
  room            Room        @relation(fields: [roomId], references: [id])

  // Identificador do schedule no OR (ex.: "evt_<eventId>")
  scheduleId      String      @unique

  // Estado e idempotência
  status          PushStatus  @default(PENDING)
  payloadHash     String
  attempts        Int         @default(0)
  lastError       String?

  // Timestamps
  pushedAt        DateTime?
  acknowledgedAt  DateTime?

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}
